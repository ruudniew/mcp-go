// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mcp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MCPService_StreamMessages_FullMethodName = "/mcp.MCPService/StreamMessages"
	MCPService_SendMessage_FullMethodName    = "/mcp.MCPService/SendMessage"
)

// MCPServiceClient is the client API for MCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MCPService defines the gRPC service for Model Context Protocol
type MCPServiceClient interface {
	// StreamMessages establishes a bidirectional stream for JSON-RPC messages
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MCPMessage, MCPMessage], error)
	// SendMessage sends a single message and returns a response
	SendMessage(ctx context.Context, in *MCPMessage, opts ...grpc.CallOption) (*MCPMessage, error)
}

type mCPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMCPServiceClient(cc grpc.ClientConnInterface) MCPServiceClient {
	return &mCPServiceClient{cc}
}

func (c *mCPServiceClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MCPMessage, MCPMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MCPService_ServiceDesc.Streams[0], MCPService_StreamMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MCPMessage, MCPMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MCPService_StreamMessagesClient = grpc.BidiStreamingClient[MCPMessage, MCPMessage]

func (c *mCPServiceClient) SendMessage(ctx context.Context, in *MCPMessage, opts ...grpc.CallOption) (*MCPMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MCPMessage)
	err := c.cc.Invoke(ctx, MCPService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MCPServiceServer is the server API for MCPService service.
// All implementations must embed UnimplementedMCPServiceServer
// for forward compatibility.
//
// MCPService defines the gRPC service for Model Context Protocol
type MCPServiceServer interface {
	// StreamMessages establishes a bidirectional stream for JSON-RPC messages
	StreamMessages(grpc.BidiStreamingServer[MCPMessage, MCPMessage]) error
	// SendMessage sends a single message and returns a response
	SendMessage(context.Context, *MCPMessage) (*MCPMessage, error)
	mustEmbedUnimplementedMCPServiceServer()
}

// UnimplementedMCPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMCPServiceServer struct{}

func (UnimplementedMCPServiceServer) StreamMessages(grpc.BidiStreamingServer[MCPMessage, MCPMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedMCPServiceServer) SendMessage(context.Context, *MCPMessage) (*MCPMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMCPServiceServer) mustEmbedUnimplementedMCPServiceServer() {}
func (UnimplementedMCPServiceServer) testEmbeddedByValue()                    {}

// UnsafeMCPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MCPServiceServer will
// result in compilation errors.
type UnsafeMCPServiceServer interface {
	mustEmbedUnimplementedMCPServiceServer()
}

func RegisterMCPServiceServer(s grpc.ServiceRegistrar, srv MCPServiceServer) {
	// If the following call pancis, it indicates UnimplementedMCPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MCPService_ServiceDesc, srv)
}

func _MCPService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MCPServiceServer).StreamMessages(&grpc.GenericServerStream[MCPMessage, MCPMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MCPService_StreamMessagesServer = grpc.BidiStreamingServer[MCPMessage, MCPMessage]

func _MCPService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MCPMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MCPServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MCPService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MCPServiceServer).SendMessage(ctx, req.(*MCPMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MCPService_ServiceDesc is the grpc.ServiceDesc for MCPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MCPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcp.MCPService",
	HandlerType: (*MCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MCPService_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _MCPService_StreamMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mcp.proto",
}
